import java.util.Scanner;

class MinHeap {
    int[] arr;
    int maxSize, heapSize;

    MinHeap(int maxSize) {
        this.maxSize = maxSize;
        heapSize = 0;
        arr = new int[maxSize];
    }

    int parent(int i) {
        return (i - 1) / 2;
    }

    int lChild(int i) {
        return 2 * i + 1;
    }

    int rChild(int i) {
        return 2 * i + 2;
    }

    void MinHeapify(int i) {
        int l = lChild(i);
        int r = rChild(i);
        int smallest = i;

        if (l < heapSize && arr[l] < arr[i])
            smallest = l;

        if (r < heapSize && arr[r] < arr[smallest])
            smallest = r;

        if (smallest != i) {
            int temp = arr[i];
            arr[i] = arr[smallest];
            arr[smallest] = temp;
            MinHeapify(smallest);
        }
    }

    void removeMin() {
        if (heapSize <= 0) {
            System.out.println("Heap is empty");
        } else if (heapSize == 1) {
            heapSize--;
        } else {
            arr[0] = arr[heapSize - 1];
            heapSize--;
            MinHeapify(0);
        }
    }

    int getMin() {
        return arr[0];
    }

    int curSize() {
        return heapSize;
    }

    void insertKey(int x) {
        if (heapSize == maxSize) {
            System.out.println("\nOverflow: Could not insertKey\n");
            return;
        }

        int i = heapSize;
        arr[i] = x;
        heapSize++;

        while (i != 0 && arr[parent(i)] > arr[i]) {
            int temp = arr[i];
            arr[i] = arr[parent(i)];
            arr[parent(i)] = temp;
            i = parent(i);
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Ask the user to input the size of the heap
        System.out.println("Enter the size of the heap:");
        int heapSize = scanner.nextInt();
        
        // Create the heap with user-defined size
        MinHeap h = new MinHeap(heapSize);
        
        // Asking user to input how many elements they want to insert
        System.out.println("Enter the number of elements to insert into the heap:");
        int numElements = scanner.nextInt();

        // Check if the number of elements is greater than the heap size
        if (numElements > heapSize) {
            System.out.println("Error: Number of elements exceeds the heap size.");
            return;
        }

        // Inserting elements from user input
        System.out.println("Enter the elements:");
        for (int i = 0; i < numElements; i++) {
            int element = scanner.nextInt();
            h.insertKey(element);
        }

        System.out.println("The current size of the heap is " + h.curSize());
        System.out.println("The current minimum element is " + h.getMin());

        // Allow user to perform operations like removing the min element
        System.out.println("Do you want to remove the minimum element? (yes/no)");
        String response = scanner.next();
        if (response.equalsIgnoreCase("yes")) {
            h.removeMin();
            System.out.println("The minimum element was removed.");
        }

        System.out.println("The current size of the heap is " + h.curSize());
        System.out.println("The current minimum element is " + h.getMin());

        // Asking user for more insertions if desired
        System.out.println("Do you want to insert more elements? (yes/no)");
        response = scanner.next();
        while (response.equalsIgnoreCase("yes")) {
            System.out.println("Enter the element to insert:");
            int newElement = scanner.nextInt();
            h.insertKey(newElement);
            System.out.println("The current size of the heap is " + h.curSize());
            System.out.println("The current minimum element is " + h.getMin());
            System.out.println("Do you want to insert another element? (yes/no)");
            response = scanner.next();
        }

        scanner.close();
    }
}
